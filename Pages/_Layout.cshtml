@using Microsoft.AspNetCore.Components.Web
@namespace starterkit.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@inject Microsoft.AspNetCore.Components.NavigationManager NavigationManager // This line is used to generate URLs dynamically //
@inject StateService stateService
@using System.Text.Json;
@inject IHttpContextAccessor HttpContextAccessor
@{ 
    var appState = stateService.GetAppState();

}
<!DOCTYPE html>
<html lang="en"  data-toggled="close"

    @if (!string.IsNullOrEmpty(appState?.Direction))
    {
        <text>dir="@appState.Direction"</text>
    }
    @if (!string.IsNullOrEmpty(appState?.NavigationStyles))
    {
        <text>data-nav-layout="@appState.NavigationStyles"</text>
    }
    @if (!string.IsNullOrEmpty(appState?.ColorTheme))
    {
        <text>data-theme-mode="@appState.ColorTheme"</text>
    }
    @if (!string.IsNullOrEmpty(appState?.HeaderColor))
    {
        <text>data-header-styles="@appState.HeaderColor"</text>
    }
    @if (!string.IsNullOrEmpty(appState?.MenuColor))
    {
        <text>data-menu-styles="@appState.MenuColor"</text>
    }
    @if (!string.IsNullOrEmpty(appState?.MenuStyles))
    {
        <text>data-nav-style="@appState.MenuStyles"</text>
    }
    @if (!string.IsNullOrEmpty(appState?.PageStyles))
    {
        <text>data-page-style="@appState.PageStyles"</text>
    }
    @if (!string.IsNullOrEmpty(appState?.WidthStyles))
    {
        <text>data-width="@appState.WidthStyles"</text>
    }
    @if (!string.IsNullOrEmpty(appState?.MenuPosition))
    {
        <text>data-menu-position="@appState.MenuPosition"</text>
    }
    @if (!string.IsNullOrEmpty(appState?.HeaderPosition))
    {
        <text>data-header-position="@appState.HeaderPosition"</text>
    }
    @if (!string.IsNullOrEmpty(appState?.BackgroundImage))
    {
        <text>data-bg-img="@appState.BackgroundImage"</text>
    }
     @{
        string style = "";

        if (!string.IsNullOrEmpty(appState?.ThemePrimary))
        {
            style += $"--primary-rgb: {appState.ThemePrimary}; ";
        }
        if (!string.IsNullOrEmpty(appState?.ThemeBackground))
        {
            style += $"--body-bg-rgb: {appState.ThemeBackground}; ";
            style += $"--body-bg-rgb2: {appState.ThemeBackground1}; ";
            style += $"--light-rgb: {appState.ThemeBackground1}; ";
            style += $"--form-control-bg: rgb({appState.ThemeBackground1}); ";
            style += $"--input-border: rgba(255,255,255,0.1); ";
        }
    }
    style="@style"
>

    <head>
        <!-- META DATA -->
        <meta charset="UTF-8">
        <meta name='viewport' content='width=device-width, initial-scale=1.0'>
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <meta name="Description" content="Bootstrap Responsive Admin Web Dashboard HTML5 Template">
        <meta name="Author" content="Spruko Technologies Private Limited">
        <meta name="keywords" content="blazor, blazor c#, blazor template, dashboard, blazor ui, dashboard template, blazor bootstrap, blazor framework, admin, blazor net, bootstrap, bootstrap css, admindashboard, bootstrap blazor, bootstrap admin">
        <base href="~/" />

        <!-- TITLE -->
        <title> Ynex - Blazor Server Bootstrap5 Premium Admin & Dashboard Template </title>

        <!-- Favicon -->
        <link rel="icon" href="@($"{NavigationManager.BaseUri}assets/images/brand-logos/favicon.ico")" type="image/x-icon">

        <!-- Style Css -->
        <link href="@($"{NavigationManager.BaseUri}assets/css/styles.css")" rel="stylesheet" >

        <!-- Icons Css -->
        <link href="@($"{NavigationManager.BaseUri}assets/css/icons.css")" rel="stylesheet" >

        <!-- Tom Select CSS -->
        <link rel="stylesheet" href="@($"{NavigationManager.BaseUri}assets/libs/tom-select/css/tom-select.bootstrap5.min.css")">

        <!-- ColorPicker CSS -->
        <link href="_content/BlazorColorPicker/colorpicker.css" rel="stylesheet" />
        <link href="_content/BlazorColorPicker/BlazorColorPicker.bundle.scp.css" rel="stylesheet" />

        <component type="typeof(HeadOutlet)" render-mode="ServerPrerendered" />
        
    </head>

    <body>
        @RenderBody()

        <!-- Popper JS -->
        <script src="@($"{NavigationManager.BaseUri}assets/libs/@popperjs/core/umd/popper.min.js")"></script>

        <!-- Bootstrap JS -->
        <script src="@($"{NavigationManager.BaseUri}assets/libs/bootstrap/js/bootstrap.bundle.min.js")"></script>

        <script async defer>
            window.onload = function () {
                setTimeout(() => {
                    let javascriptLinks = [
                        "/assets/js/custom.js"
                    ]
                    
                    javascriptLinks.map((link)=>{
                        var scriptElement = document.createElement('script');
                        scriptElement.src = link;
                        document.head.appendChild(scriptElement);
                    })

                }, 100);
            };
        </script>

         <script>
            // Load scripts after DOM content is loaded
            document.addEventListener("DOMContentLoaded", function () {
                var scriptUrls = [

                    "../assets/libs/tom-select/js/tom-select.complete.min.js",
                    
                ];
                scriptUrls.forEach(function (url) {
                    var script = document.createElement("script");
                    script.src = url;
                    document.body.appendChild(script);
                });
            });
        </script>

        
        <!-- Interop JS -->
        <script src="_framework/blazor.server.js"></script>
        <script src="js/javaScriptInterop.js"></script>
        <script src="js/resizeInterop.js"></script>
        
        <script>

            function CaptureElementAndCallBlazorFunction(event, menuData) {
                var element = event.currentTarget;
                var menuId = element.dataset.menuId;
                window.DotNet.invokeMethodAsync("starterkit.SubNavMenu", "TriggerFunction", element, menuData, null);
            }

        </script>

    </body>

</html>
